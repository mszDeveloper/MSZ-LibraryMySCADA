<y:ClassVirtualAdd
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:LibraryMySCADA.DirectionPanel"
             xmlns:y="clr-namespace:LibraryMySCADA.Virt"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" xmlns:ArrowPointer="clr-namespace:wpfLibMszControl.ArrowPointer" xmlns:LibraryMySCADA="clr-namespace:LibraryMySCADA" xmlns:Pid="clr-namespace:wpfMszControl.Pid" xmlns:Logics="clr-namespace:LibraryMySCADA.Logics" xmlns:Convertors="clr-namespace:LibraryMySCADA.Convertors" x:Name="classVirtualAdd" x:Class="LibraryMySCADA.DirectionPanel.DirectionPanel"
             mc:Ignorable="d" Loaded="classVirtualAdd_Loaded" BorderBrush="Black" BorderThickness="1" Foreground="#FFF0EBE6" Background="#FFCDCDCD" Style="{DynamicResource ClassVirtualAddStyle1}" HorizontalAlignment="Center" VerticalAlignment="Center">

    <y:ClassVirtualAdd.Resources>
        <Convertors:InvertableBooleanToVisibilityConverter x:Key="InvertableBooleanToVisibilityConverter"/>
        <!--<Style TargetType="{x:Type local:DirectionPanel}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Panel.ZIndex" Value="1" />
                </Trigger>
            </Style.Triggers>
        </Style>-->

        <local:ConfertorBoolTo_NOT_Bool x:Key="ConfertorBoolTo_NOT_Bool"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="ClassVirtualAddStyle1" TargetType="{x:Type y:ClassVirtualAdd}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type y:ClassVirtualAdd}">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Height="118.667" Width="274.667"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </y:ClassVirtualAdd.Resources>
    <i:Interaction.Behaviors>
        <ei:MouseDragElementBehavior x:FieldModifier="public" x:Name="MouseDragElementBehavior" ConstrainToParentBounds="True"/>
    </i:Interaction.Behaviors>

    <Canvas x:Name="rootCanvas" Grid.IsSharedSizeScope="True" Margin="0,5,0,-4.667">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="VisualStateGroup">
                <VisualStateGroup.Transitions>
                    <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="VisualStateVisible">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="classVirtualAdd">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="classVirtualAdd">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="VisualStateHide">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="classVirtualAdd">
                            <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Hidden}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="classVirtualAdd">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid ScrollViewer.VerticalScrollBarVisibility="Disabled" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <i:Interaction.Behaviors>
                <ei:DataStateBehavior Binding="{Binding HideVisiblePanel, ElementName=classVirtualAdd, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="true" TrueState="VisualStateVisible" FalseState="VisualStateHide"/>
            </i:Interaction.Behaviors>
            <Border x:Name="border" Background="{Binding Background, ElementName=classVirtualAdd}" BorderBrush="{Binding BorderBrush, ElementName=classVirtualAdd}" BorderThickness="{Binding BorderThickness, ElementName=classVirtualAdd}" CornerRadius="4" MaxWidth="800" MaxHeight="500" UseLayoutRounding="True" ScrollViewer.VerticalScrollBarVisibility="Disabled" SnapsToDevicePixels="True" Grid.IsSharedSizeScope="True" ClipToBounds="True" RenderTransformOrigin="0.5,0.5" Padding="0" Margin="0" Grid.RowSpan="3"/>
            <WrapPanel x:FieldModifier="public" x:Name="WrapPanelArrow" Margin="6,6,6,0" Orientation="Horizontal" ScrollViewer.VerticalScrollBarVisibility="Disabled" MaxHeight="66" HorizontalAlignment="Center" IsEnabled="{Binding isEneblePanel, ElementName=classVirtualAdd, Mode=OneWay}">
                <ArrowPointer:ucArrowPointer x:FieldModifier="public" x:Name="arrowAmperage" Height="65.5" Width="130" ValuePr="A" MaxValue="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0" Visibility="{Binding AMperageArrow, ElementName=classVirtualAdd}" BorderBrush="Black" Foreground="{Binding BackArrowColor, ElementName=classVirtualAdd}"/>
                <ArrowPointer:ucArrowPointer x:FieldModifier="public"  x:Name="arrowFRQ" Height="66" Width="130" MaxValue="50" ValuePr="HZ" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="2,0,0,0" Visibility="{Binding FRQArrow, ElementName=classVirtualAdd}" Foreground="{Binding BackArrowColor, ElementName=classVirtualAdd}" Value="{Binding outValue, ElementName=classVirtualAdd, Mode=OneWayToSource}" visualMinMax="{Binding isUseMinMaxSetting, ElementName=classVirtualAdd, Mode=OneWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged" SourceName="comboBox" SourceObject="{Binding ElementName=comboBox}">
                            <i:Interaction.Behaviors>
                                <ei:ConditionBehavior>
                                    <ei:ConditionalExpression>
                                        <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Manual"/>
                                        <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Manual"/>
                                    </ei:ConditionalExpression>
                                </ei:ConditionBehavior>
                            </i:Interaction.Behaviors>
                            <ei:ChangePropertyAction TargetName="arrowFRQ" TargetObject="{Binding ElementName=classVirtualAdd}" PropertyName="ManualAuto" Value="True"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="SelectionChanged" SourceName="comboBox" SourceObject="{Binding ElementName=comboBox}">
                            <i:Interaction.Behaviors>
                                <ei:ConditionBehavior>
                                    <ei:ConditionalExpression>
                                        <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Auto"/>
                                        <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Auto"/>
                                    </ei:ConditionalExpression>
                                </ei:ConditionBehavior>
                            </i:Interaction.Behaviors>
                            <ei:ChangePropertyAction TargetName="arrowFRQ" TargetObject="{Binding ElementName=classVirtualAdd}" PropertyName="ManualAuto" Value="False"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ArrowPointer:ucArrowPointer>
            </WrapPanel>
            <WrapPanel x:Name="WrapPanelSetting"  x:FieldModifier="public" Grid.Row="1" Margin="4,4,4,0" HorizontalAlignment="Center" VerticalAlignment="Center" IsEnabled="{Binding isEneblePanel, ElementName=classVirtualAdd, Mode=OneWay}">
                <ComboBox x:FieldModifier="public" x:Name="comboBox" SelectedIndex="0" Padding="2,-1,2,2" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Center" Width="65" Height="16" VerticalAlignment="Top" Visibility="{Binding manualAutoVisible, ElementName=classVirtualAdd}" MaxHeight="16" SelectionChanged="comboBox_SelectionChanged">
                    <ComboBoxItem Content="Manual"/>
                    <ComboBoxItem Content="Auto"/>
                </ComboBox>
                <Button x:FieldModifier="public" x:Name="buttonPID" VerticalAlignment="Top" HorizontalAlignment="Left" Padding="3,-2,3,1" Visibility="{Binding buttonPIDVisible, ElementName=classVirtualAdd}" Margin="4,0,0,0" Style="{DynamicResource ButtonStyle1}" Height="15" Content="Pid"/>
                <Border x:Name="borderMaxAm" Background="#FF9B9B9B" CornerRadius="2" BorderThickness="1" Visibility="{Binding MaxAmperagePanel, ElementName=classVirtualAdd}" Height="16" Width="104" Margin="4,0,0,0">
                    <Border.BorderBrush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Black" Offset="1"/>
                            <GradientStop Color="#FF8B8A8A" Offset="0.003"/>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Grid>
                        <LibraryMySCADA:ucNumberOfUpDown x:FieldModifier="internal" x:Name="maxAmperage" Height="14" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0" HorizontalAlignment="Right" Width="51" Margin="4,0,0,0"/>
                        <Button x:FieldModifier="public" x:Name="ResetAMPERAGEAlarm" Content="Maks Am." HorizontalAlignment="Left" VerticalAlignment="Top" Width="48" Height="12" Margin="2,1,0,0" FontSize="10" Padding="1,-2,1,1" Style="{DynamicResource ButtonStyle1}">
                            <Button.Resources>
                                <Style x:Key="FocusVisual">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                                <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                                <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                                <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
                                <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                                <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
                                <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                                <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                                <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                                <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                                <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                    <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Padding" Value="1"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="2">
                                                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsDefaulted" Value="true">
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="true">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="true">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                                        <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Resources>
                        </Button>
                    </Grid>
                </Border>
            </WrapPanel>
            <WrapPanel x:Name="WrapPanelDirection" Orientation="Horizontal" Grid.Row="2" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="4" IsEnabled="{Binding isEneblePanel, ElementName=classVirtualAdd, Mode=OneWay}">
                <StackPanel Height="18" Orientation="Horizontal" Visibility="{Binding StartStopVisible, ElementName=classVirtualAdd}">
                    <Button x:FieldModifier="public" x:Name="buttonStart" Content="Start" Height="18" VerticalAlignment="Top" Background="#FF4AB618" Visibility="{Binding OnOff, ConverterParameter=Inverted, Converter={StaticResource InvertableBooleanToVisibilityConverter}, ElementName=classVirtualAdd}" Width="56" MinWidth="56" MaxWidth="56" MaxHeight="20" Padding="1,-1,1,1" IsEnabled="{Binding ManualAuto, Converter={StaticResource ConfertorBoolTo_NOT_Bool}, ElementName=classVirtualAdd, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0" Style="{DynamicResource ButtonStyle1}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:Interaction.Behaviors>
                                    <ei:ConditionBehavior>
                                        <ei:ConditionalExpression>
                                            <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Manual"/>
                                        </ei:ConditionalExpression>
                                    </ei:ConditionBehavior>
                                </i:Interaction.Behaviors>
                                <ei:ChangePropertyAction TargetObject="{Binding ElementName=classVirtualAdd}" PropertyName="OnOff" TargetName="{Binding ElementName=classVirtualAdd, Mode=OneWay}" Value="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                    <Button x:FieldModifier="public" x:Name="buttonStop" Content="Stop" Height="18" VerticalAlignment="Top" HorizontalAlignment="Left" Width="56" Visibility="{Binding OnOff, ConverterParameter=Normal, Converter={StaticResource InvertableBooleanToVisibilityConverter}, ElementName=classVirtualAdd}" Background="#FFEA5804" MaxWidth="56" MaxHeight="20" MinWidth="56" Padding="1,-1,1,1" IsEnabled="{Binding IsEnabled, ElementName=buttonStart}" Style="{DynamicResource ButtonStyle1}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger SourceObject="{Binding ElementName=buttonStop}" SourceName="buttonStop" EventName="Click">
                                <i:Interaction.Behaviors>
                                    <ei:ConditionBehavior>
                                        <ei:ConditionalExpression>
                                            <ei:ComparisonCondition LeftOperand="{Binding Text, ElementName=comboBox}" RightOperand="Manual"/>
                                        </ei:ConditionalExpression>
                                    </ei:ConditionBehavior>
                                </i:Interaction.Behaviors>
                                <ei:ChangePropertyAction Value="False" TargetName="{Binding ElementName=classVirtualAdd, Mode=OneWay}" TargetObject="{Binding ElementName=classVirtualAdd}" PropertyName="OnOff"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </StackPanel>
                <Button x:FieldModifier="public" x:Name="buttonReset" Content="ERROR" Height="18" VerticalAlignment="Top" HorizontalAlignment="Left" Width="50" Visibility="{Binding ResetVisible, ElementName=classVirtualAdd}" Background="#FFFF4951" Margin="19,0,0,0" Padding="1,-1,1,1"/>
            </WrapPanel>
            <Button x:Name="buttonHide" Content="Button" HorizontalAlignment="Right" VerticalAlignment="Top" Width="15.45" Margin="0,-7.563,6,0" Height="15.313" HorizontalContentAlignment="Right" Style="{DynamicResource ButtonHideStyle}" Click="buttonHide_Click" Background="{Binding Foreground, ElementName=classVirtualAdd}" BorderBrush="#FFACAAAA" Foreground="#FFB9B6B6">
                <Button.Resources>
                    <Style x:Key="FocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
                    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
                    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                    <Style x:Key="ButtonHideStyle" TargetType="{x:Type Button}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="4">
                                        <Grid x:Name="grid" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto">
                                            <Path Data="M0.562,0.50099997 L15.25,15.313 M0.50000001,15.376 L15.375,0.5" Fill="#FFF4F4F5" HorizontalAlignment="Center" Height="8.281" Stretch="Fill" Stroke="Black" VerticalAlignment="Center" Width="8.366" StrokeThickness="2" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="2.667,2.542,2.417,2.49"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsDefaulted" Value="true">
                                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Height" TargetName="grid" Value="14.875"/>
                                            <Setter Property="Width" TargetName="grid" Value="14.875"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Resources>
            </Button>
            <WrapPanel Orientation="Vertical" HorizontalAlignment="Center" Margin="0,0,20,0">
                <Label x:Name="LabelTitle" HorizontalAlignment="Center" VerticalAlignment="Top" Padding="5,0,5,5" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{DynamicResource LabelStyle1}" Background="{Binding Background, ElementName=buttonHide}" Height="16.293" Margin="0,-9,0,0" Visibility="{Binding ShowTitle, ElementName=classVirtualAdd}">
                    <Label.Resources>
                        <ResourceDictionary>
                            <ResourceDictionary.MergedDictionaries>
                                <ResourceDictionary Source="/LibraryMySCADA;component/DictionaryLibrarySCADA.xaml"/>
                            </ResourceDictionary.MergedDictionaries>
                            <Style x:Key="LabelStyle1" TargetType="{x:Type Label}">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Padding" Value="5"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="VerticalContentAlignment" Value="Top"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Label}">
                                            <Border SnapsToDevicePixels="true" Padding="2" Margin="0,0,0,-0.333" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="4" BorderThickness="1">
                                                <Border.BorderBrush>
                                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                        <GradientStop Color="Black" Offset="1"/>
                                                        <GradientStop Color="#FFE2C0C0"/>
                                                    </LinearGradientBrush>
                                                </Border.BorderBrush>
                                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Height="20.544" Margin="0,-4.334,0,-5.584"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ResourceDictionary>
                    </Label.Resources>
                </Label>
            </WrapPanel>
        </Grid>
    </Canvas>
</y:ClassVirtualAdd>
