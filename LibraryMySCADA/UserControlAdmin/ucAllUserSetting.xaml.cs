using LibraryMySCADA.Virt;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Xml.Serialization;

namespace LibraryMySCADA.UserControlAdmin
{
    /// <summary>
    /// Логика взаимодействия для ucAllUserSetting.xaml
    /// </summary>
    /// 
    public class UserData //: INotifyPropertyChanged
    {
        public string NameUser { get; set; }
        public string Password { get; set; }
        //public bool Admin { get; set; }
        public UserType userType { get; set; }
        public string PathToAvatar
        {
            get { return _PathToAvatar; }
            set { _PathToAvatar = value; }//OnPropertyChanged("PathToAvatar");
        }

        string _PathToAvatar = null;


        //public event PropertyChangedEventHandler PropertyChanged;

        //public void OnPropertyChanged(string prop)
        //{
        //    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(prop));
        //}
    }

    //-----------------------------------------------------------------------------------------------------
    public partial class ucAllUserSetting : UserControl
    {


        public ObservableCollection<UserData> Users
        {
            get { return (ObservableCollection<UserData>)GetValue(UsersProperty); }
            set { SetValue(UsersProperty, value); }
        }

        public static readonly DependencyProperty UsersProperty =
            DependencyProperty.Register("Users", typeof(ObservableCollection<UserData>), typeof(ucAllUserSetting), new PropertyMetadata(new ObservableCollection<UserData>()));


        //-----------------------------------------------------------------------------------------------------
        public bool? GetAdmin(string name)
        {
            foreach (var item in Users)
            {
                if (item.NameUser == name) return item.userType == UserType.Администратор;
            }
            return null;
        }

        //-----------------------------------------------------------------------------------------------------
        public UserData GetUser(string name)
        {
            foreach (var item in Users)
            {
                if (item.NameUser == name) return item;
            }
            return null;
        }

        //-----------------------------------------------------------------------------------------------------
        public string GetAvatarPath(string name)
        {
            foreach (var item in Users)
            {
                if (item.NameUser == name) return item.PathToAvatar;
            }
            return null;
        }

        //-----------------------------------------------------------------------------------------------------
        public void SetUserAvatar(string NameUser, string PathToAvatar)
        {
            foreach (var item in Users)
            {
                if (item.NameUser == NameUser)
                {
                    item.PathToAvatar = PathToAvatar;

                    return;
                }
            }

        }
        //-----------------------------------------------------------------------------------------------------
        public ucAllUserSetting()
        {
            InitializeComponent();
            Users = new ObservableCollection<UserData>();
        }

        //-----------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------
        private void dataGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header = e.Row.GetIndex() + 1;
        }

        //-----------------------------------------------------------------------------------------------------
        private void dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            dataGrid.Columns[0].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
        }

        //-----------------------------------------------------------------------------------------------------
        private void dataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
        }

        private void button_close_Click(object sender, RoutedEventArgs e)
        {
            
        }

        private void dataGrid_AddingNewItem(object sender, AddingNewItemEventArgs e)
        {
            
        }

        //-----------------------------------------------------------------------------------------------------


    }
}
